{"ast":null,"code":"var _jsxFileName = \"/Users/hanshuai/Desktop/\\u7B80\\u62A5/weather-report/src/map-demo.js\";\nimport React, { Component } from \"react\"; // import {Polygon} from \"react-amap\";\n// import PolygonData from \"./polygon\";\n\nimport axios from 'axios';\n\nclass WebMapDemo extends Component {\n  constructor(props) {\n    super(props); // this.getPolygonValue = this.getPolygonValue.bind(this)\n\n    this.polygonStyle = this.polygonStyle.bind(this);\n    this.state = {\n      polygonData: []\n    }; // const path = [];\n    //     for(let i=0;i<this.state.polygonData.length;i++){\n    //         for(let j=0;j<this.state.polygonData[i].length;j++){\n    //             this.state.path.push(  //eslint-disable-next-line\n    //                 new AMap.LngLat(this.state.polygonData[i][j][0],this.state.polygonData[i][j][1]))\n    // }\n    // }\n  } // ajax('test.json', (err, geoJSON) => {\n  //     if (!err) {\n  //         //eslint-disable-next-line\n  //         const geojson = new AMap.GeoJSON({\n  //             geoJSON: geoJSON,\n  //             // 还可以自定义getMarker和getPolyline\n  //             getPolygon: function(geojson, lnglats) {\n  //                 // 计算面积\n  //                 //eslint-disable-next-line\n  //                 var area = AMap.GeometryUtil.ringArea(lnglats[0])\n  //\n  //                 //eslint-disable-next-line\n  //                 return new AMap.Polygon({\n  //                     path: lnglats,\n  //                     fillOpacity: 1 - Math.sqrt(area / 8000000000),// 面积越大透明度越高\n  //                     strokeColor: 'white',\n  //                     fillColor: 'red'\n  //                 });\n  //             }\n  //         });\n  //         this.map.add(geojson);\n  //         log.success('GeoJSON 数据加载完成')\n  //     } else {\n  //         log.error('GeoJSON 服务请求失败')\n  //     }\n  // })\n\n\n  polygonStyle(err, geoJSON) {\n    if (!err) {\n      //eslint-disable-next-line\n      const geojson = new AMap.GeoJSON({\n        geoJSON: geoJSON,\n        // 还可以自定义getMarker和getPolyline\n        getPolygon: function (geojson, lnglats) {\n          // 计算面积\n          //eslint-disable-next-line\n          var area = AMap.GeometryUtil.ringArea(lnglats[0]); //eslint-disable-next-line\n\n          return new AMap.Polygon({\n            path: lnglats,\n            fillOpacity: 1 - Math.sqrt(area / 8000000000),\n            // 面积越大透明度越高\n            strokeColor: 'white',\n            fillColor: 'red'\n          });\n        }\n      });\n      this.map.add(geojson);\n      log.success('GeoJSON 数据加载完成');\n    } else {\n      log.error('GeoJSON 服务请求失败');\n    }\n  }\n\n  componentDidMount() {\n    //eslint-disable-next-line\n    this.map = new AMap.Map('container', {\n      zoom: 4,\n      //地图初始化显示时候的缩放程度\n      showLabel: false,\n      //不显示地图文字标记\n      center: [124.25, 26.25] //设置地图中心点坐标\n\n    }); // //eslint-disable-next-line\n    // const polygon = new AMap.Polygon({\n    //     path: this.path,\n    //     fillColor: '#fff', // 多边形填充颜色\n    //     borderWeight: 2, // 线条宽度，默认为 1\n    //     strokeColor: 'black', // 线条颜色\n    // });\n    // this.map.add(polygon);\n\n    ajax('test.json', this.polygonStyle(err, geoJSON));\n  } // getPolygonValue(val) {\n  //     this.setState({\n  //         polygonData: val\n  //     })\n  //     console.log(this.state.polygonData)\n  //\n  // }\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }, \"null\");\n  }\n\n}\n\nexport default WebMapDemo;","map":{"version":3,"sources":["/Users/hanshuai/Desktop/简报/weather-report/src/map-demo.js"],"names":["React","Component","axios","WebMapDemo","constructor","props","polygonStyle","bind","state","polygonData","err","geoJSON","geojson","AMap","GeoJSON","getPolygon","lnglats","area","GeometryUtil","ringArea","Polygon","path","fillOpacity","Math","sqrt","strokeColor","fillColor","map","add","log","success","error","componentDidMount","Map","zoom","showLabel","center","ajax","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;AACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAN,SAAyBF,SAAzB,CAAmC;AAC/BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAEf;;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAE;AADJ,KAAb,CAJe,CAQf;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAhB8B,CAkB/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAH,EAAAA,YAAY,CAACI,GAAD,EAAMC,OAAN,EAAe;AACvB,QAAI,CAACD,GAAL,EAAU;AACN;AACA,YAAME,OAAO,GAAG,IAAIC,IAAI,CAACC,OAAT,CAAiB;AAC7BH,QAAAA,OAAO,EAAEA,OADoB;AAE7B;AACAI,QAAAA,UAAU,EAAE,UAASH,OAAT,EAAkBI,OAAlB,EAA2B;AACnC;AACA;AACA,cAAIC,IAAI,GAAGJ,IAAI,CAACK,YAAL,CAAkBC,QAAlB,CAA2BH,OAAO,CAAC,CAAD,CAAlC,CAAX,CAHmC,CAKnC;;AACA,iBAAO,IAAIH,IAAI,CAACO,OAAT,CAAiB;AACpBC,YAAAA,IAAI,EAAEL,OADc;AAEpBM,YAAAA,WAAW,EAAE,IAAIC,IAAI,CAACC,IAAL,CAAUP,IAAI,GAAG,UAAjB,CAFG;AAE0B;AAC9CQ,YAAAA,WAAW,EAAE,OAHO;AAIpBC,YAAAA,SAAS,EAAE;AAJS,WAAjB,CAAP;AAMH;AAf4B,OAAjB,CAAhB;AAiBA,WAAKC,GAAL,CAASC,GAAT,CAAahB,OAAb;AACAiB,MAAAA,GAAG,CAACC,OAAJ,CAAY,gBAAZ;AACH,KArBD,MAqBO;AACHD,MAAAA,GAAG,CAACE,KAAJ,CAAU,gBAAV;AACH;AACJ;;AAEDC,EAAAA,iBAAiB,GAAE;AACf;AACA,SAAKL,GAAL,GAAW,IAAId,IAAI,CAACoB,GAAT,CAAa,WAAb,EAA0B;AACjCC,MAAAA,IAAI,EAAE,CAD2B;AACzB;AACRC,MAAAA,SAAS,EAAE,KAFsB;AAEf;AAClBC,MAAAA,MAAM,EAAE,CAAC,MAAD,EAAS,KAAT,CAHyB,CAGV;;AAHU,KAA1B,CAAX,CAFe,CAOf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,IAAAA,IAAI,CAAC,WAAD,EAAa,KAAK/B,YAAL,CAAkBI,GAAlB,EAAuBC,OAAvB,CAAb,CAAJ;AACF,GAvF6B,CA0F/B;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA2B,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAMH;;AA1G8B;;AA8GnC,eAAenC,UAAf","sourcesContent":["import React, { Component } from \"react\";\n// import {Polygon} from \"react-amap\";\n// import PolygonData from \"./polygon\";\nimport axios from 'axios';\n\nclass WebMapDemo extends Component {\n    constructor(props) {\n        super(props);\n        // this.getPolygonValue = this.getPolygonValue.bind(this)\n        this.polygonStyle = this.polygonStyle.bind(this)\n        this.state = {\n            polygonData: [],\n        }\n\n        // const path = [];\n        //     for(let i=0;i<this.state.polygonData.length;i++){\n        //         for(let j=0;j<this.state.polygonData[i].length;j++){\n        //             this.state.path.push(  //eslint-disable-next-line\n        //                 new AMap.LngLat(this.state.polygonData[i][j][0],this.state.polygonData[i][j][1]))\n        // }\n        // }\n    }\n\n    // ajax('test.json', (err, geoJSON) => {\n    //     if (!err) {\n    //         //eslint-disable-next-line\n    //         const geojson = new AMap.GeoJSON({\n    //             geoJSON: geoJSON,\n    //             // 还可以自定义getMarker和getPolyline\n    //             getPolygon: function(geojson, lnglats) {\n    //                 // 计算面积\n    //                 //eslint-disable-next-line\n    //                 var area = AMap.GeometryUtil.ringArea(lnglats[0])\n    //\n    //                 //eslint-disable-next-line\n    //                 return new AMap.Polygon({\n    //                     path: lnglats,\n    //                     fillOpacity: 1 - Math.sqrt(area / 8000000000),// 面积越大透明度越高\n    //                     strokeColor: 'white',\n    //                     fillColor: 'red'\n    //                 });\n    //             }\n    //         });\n    //         this.map.add(geojson);\n    //         log.success('GeoJSON 数据加载完成')\n    //     } else {\n    //         log.error('GeoJSON 服务请求失败')\n    //     }\n    // })\n    polygonStyle(err, geoJSON) {\n        if (!err) {\n            //eslint-disable-next-line\n            const geojson = new AMap.GeoJSON({\n                geoJSON: geoJSON,\n                // 还可以自定义getMarker和getPolyline\n                getPolygon: function(geojson, lnglats) {\n                    // 计算面积\n                    //eslint-disable-next-line\n                    var area = AMap.GeometryUtil.ringArea(lnglats[0])\n\n                    //eslint-disable-next-line\n                    return new AMap.Polygon({\n                        path: lnglats,\n                        fillOpacity: 1 - Math.sqrt(area / 8000000000),// 面积越大透明度越高\n                        strokeColor: 'white',\n                        fillColor: 'red'\n                    });\n                }\n            });\n            this.map.add(geojson);\n            log.success('GeoJSON 数据加载完成')\n        } else {\n            log.error('GeoJSON 服务请求失败')\n        }\n    }\n\n    componentDidMount(){\n        //eslint-disable-next-line\n        this.map = new AMap.Map('container', {\n            zoom: 4,//地图初始化显示时候的缩放程度\n            showLabel: false, //不显示地图文字标记\n            center: [124.25, 26.25]//设置地图中心点坐标\n        });\n        // //eslint-disable-next-line\n        // const polygon = new AMap.Polygon({\n        //     path: this.path,\n        //     fillColor: '#fff', // 多边形填充颜色\n        //     borderWeight: 2, // 线条宽度，默认为 1\n        //     strokeColor: 'black', // 线条颜色\n        // });\n        // this.map.add(polygon);\n        ajax('test.json',this.polygonStyle(err, geoJSON))\n     }\n\n\n    // getPolygonValue(val) {\n    //     this.setState({\n    //         polygonData: val\n    //     })\n    //     console.log(this.state.polygonData)\n    //\n    // }\n\n\n    render() {\n        return (\n            <div>\n                {/*<PolygonData getPolygonValue = {this.getPolygonValue}/>*/}\n                null\n            </div>\n    )\n    }\n\n}\n\nexport default WebMapDemo;"]},"metadata":{},"sourceType":"module"}